
import { GoogleGenAI, Type } from "@google/genai";
import type { NarrativeResponse, Difficulty } from '../types';
import { GEMINI_TEXT_MODEL, GEMINI_IMAGE_MODEL, JOYCE_IMAGE_BASE_PROMPT, DIFFICULTY_SETTINGS } from '../constants';

if (!process.env.API_KEY) {
    console.error("API_KEY environment variable not set.");
}

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY! });

const responseSchema: any = {
  type: Type.OBJECT,
  properties: {
    narrative: {
      type: Type.STRING,
      description: "The next part of the story. Make it extremely seductive, explicit, and dirty, fitting a BDSM fantasy. Describe Joyce's submissive and visceral reaction. Use strong sexual language. Her boyfriend is sleeping inside, adding tension.",
    },
    options: {
      type: Type.ARRAY,
      description: "An array of 3 distinct, compelling, and explicit choices for the player. Include a relevant emoji (‚úã, üëÖ, üçÜ, ‚õìÔ∏è) at the start of each option text.",
      items: {
        type: Type.OBJECT,
        properties: {
          text: {
            type: Type.STRING,
            description: "The text for the player's choice button. Start with an emoji.",
          },
        },
        required: ["text"],
      },
    },
    excitementChange: {
      type: Type.NUMBER,
      description: "Integer for Joyce's arousal change. A dominant, risky action could be +20. A weak tease +5. An offensive remark -10.",
    },
    emotionForImage: {
      type: Type.STRING,
      description: "A short phrase describing Joyce's primary emotion for the next image (e.g., 'biting her lip in anticipation', 'a look of intense pleasure', 'eyes wide with adoration', 'a begging look in her eyes'). Keep the description evocative but safe-for-work.",
    },
    gameState: {
      type: Type.STRING,
      description: "Game state. 'continue' for normal play. 'win' if arousal is very high. 'lose' if the boyfriend catches them.",
    },
    winMessage: {
        type: Type.STRING,
        description: "An explicit message for a 'win' state. E.g., 'Ela goza, gritando seu nome. 'Me enche, [PLAYER_NAME]... enche-me com a sua porra!' Voc√™ a joga na parede e a fode at√© o amanhecer.'"
    },
    loseMessage: {
        type: Type.STRING,
        description: "A message for a 'lose' state. E.g., 'Um barulho de tosse vem de dentro. 'Droga, ele acordou!' ela sussurra, empurrando voc√™ para longe. √â o fim do jogo.'"
    },
    timerChange: {
        type: Type.NUMBER,
        description: "Optional. An integer to add or subtract from the boyfriend timer. A noisy/risky action (like a loud slap) should be -10 seconds. A seductive, distracting action that buys time should be +5 seconds. Only include if the action justifies it.",
    },
    hapticFeedback: {
      type: Type.STRING,
      description: "Optional. Trigger phone vibration. 'light' for a tease, 'strong' for an impact like a slap or deep thrust.",
    },
    sfx: {
      type: Type.STRING,
      description: "Optional. Trigger a sound effect. 'slap' for a slap, 'moan' for a suggestive moan, 'wet' for a squishing sound.",
    }
  },
  required: ["narrative", "options", "excitementChange", "emotionForImage", "gameState"],
};


export const generateNarrative = async (
  playerName: string,
  currentNarrative: string,
  playerChoice: string,
  currentExcitement: number,
  remainingTime: number,
  difficulty: Difficulty,
): Promise<NarrativeResponse> => {
  const difficultyModifier = DIFFICULTY_SETTINGS[difficulty].promptModifier;

  const prompt = `
    Voc√™ √© um mestre de jogo para um RPG er√≥tico BDSM expl√≠cito.
    Sua tarefa √© continuar a hist√≥ria, respondendo em um formato JSON espec√≠fico.

    **CONTEXTO DO JOGO:**
    - Jogador: '${playerName}', o Dominante.
    - Personagem: 'Joyce', a submissa.
    - Cen√°rio: Varia de acordo com a fantasia, mas o objetivo √© dominar Joyce.
    - Objetivo: Aumentar o Tes√£o (excitement) de Joyce para 85+ para vencer. Risco de falha existe.

    **ESTADO ATUAL:**
    - N√≠vel de Tes√£o: ${currentExcitement}/100
    - Tempo Restante: ${remainingTime} segundos.
    - Dificuldade: ${difficulty}. ${difficultyModifier}

    **HIST√ìRICO DA CENA:**
    - Narrativa Anterior: "${currentNarrative}"
    - A√ß√£o do Jogador: "${playerChoice}"

    **SUA TAREFA (PROCESSO DE PENSAMENTO EM CADEIA):**
    1.  **An√°lise do Estado:** Primeiro, analise o estado atual. O tes√£o de Joyce (${currentExcitement}) est√° baixo, m√©dio ou alto? O tempo restante (${remainingTime}) √© muito ou pouco? Como a dificuldade (${difficulty}) afeta a rea√ß√£o dela? A a√ß√£o do jogador ("${playerChoice}") se alinha com o tom da narrativa anterior?
    2.  **Desenvolvimento da Rea√ß√£o de Joyce:** Com base na sua an√°lise, descreva a rea√ß√£o dela. Se o tes√£o dela j√° est√° alto, ela deve ser mais ousada e receptiva. Se o tempo est√° acabando, a tens√£o deve aumentar. A a√ß√£o do jogador foi eficaz? Se sim, a rea√ß√£o dela deve ser intensamente positiva e visceral. Se foi fraca, ela pode ficar frustrada.
    3.  **Escalada da Narrativa:** Construa sobre a rea√ß√£o dela. Aumente a intensidade e o n√≠vel de detalhe expl√≠cito. A narrativa deve progredir logicamente. N√£o se repita. Se o jogador a est√° dominando, mostre a submiss√£o dela crescendo. Se ele est√° a provocando, mostre a frustra√ß√£o sexual dela aumentando. Use linguagem sexual forte e criativa (pau, buceta, porra, etc.).
    4.  **C√°lculo das Consequ√™ncias L√≥gicas:** Com base na nova narrativa, determine as mudan√ßas de estado:
        - **Tes√£o (excitementChange):** A a√ß√£o foi um grande passo na domina√ß√£o? (+15-20). Foi uma boa provoca√ß√£o? (+5-10). Foi um erro? (-5). A mudan√ßa deve refletir o sucesso da a√ß√£o do jogador.
        - **Tempo (timerChange):** A a√ß√£o foi barulhenta ou descuidada, aumentando o risco? Subtraia tempo (-10s). Foi t√£o cativante que o tempo pareceu parar? Adicione tempo (+5s). Se n√£o houver impacto claro, omita a propriedade.
        - **Feedback T√°til (hapticFeedback):** A narrativa descreve um impacto f√≠sico claro (tapa, estocada)? Use "strong". Descreve um toque leve ou sussurro? Use "light". Se n√£o, omita.
        - **Efeitos Sonoros (sfx):** A cena cont√©m um som ic√¥nico? Um tapa ('slap'), um gemido ('moan'), o som de fluidos ('wet')? Escolha o mais apropriado. Se n√£o, omita.
    5.  **Verifica√ß√£o de Fim de Jogo:** O novo n√≠vel de tes√£o √© >= 85? Defina \`gameState: "win"\` e escreva uma cena de cl√≠max expl√≠cita. A a√ß√£o levou a uma falha catastr√≥fica? Defina \`gameState: "lose"\`. Caso contr√°rio, \`gameState: "continue"\`.
    6.  **Cria√ß√£o de Novas Op√ß√µes:** Crie 3 novas op√ß√µes que sejam uma continua√ß√£o direta e l√≥gica da nova narrativa, oferecendo diferentes caminhos (mais domina√ß√£o, mais provoca√ß√£o, mais risco). Mantenha o formato com emoji (‚úã, üëÖ, üçÜ, ‚õìÔ∏è).
    7.  **Gera√ß√£o de Emo√ß√£o para Imagem:** Resuma a express√£o facial de Joyce no final da cena em uma frase curta e SFW (ex: 'mordendo o l√°bio em antecipa√ß√£o').

    **SA√çDA:**
    Responda APENAS com o objeto JSON formatado de acordo com o schema fornecido. N√£o inclua texto ou explica√ß√µes fora do JSON.
  `;

  try {
    const response = await ai.models.generateContent({
      model: GEMINI_TEXT_MODEL,
      contents: prompt,
      config: {
        responseMimeType: "application/json",
        responseSchema: responseSchema,
      },
    });

    const jsonText = response.text.trim();
    const parsedResponse = JSON.parse(jsonText) as NarrativeResponse;
    return parsedResponse;
  } catch (error) {
    console.error("Error generating narrative:", error);
    // Fallback in case of API error
    return {
      narrative: "Ocorreu um erro ao gerar a pr√≥xima cena. A tens√£o deve ter quebrado a conex√£o. Por favor, tente novamente.",
      options: [{ text: "Tentar novamente" }],
      excitementChange: 0,
      emotionForImage: "confused",
      gameState: "continue",
    };
  }
};

export const generateImage = async (emotionPrompt: string): Promise<string> => {
  const fullPrompt = `${JOYCE_IMAGE_BASE_PROMPT}, ${emotionPrompt}`;
  try {
    const response = await ai.models.generateImages({
        model: GEMINI_IMAGE_MODEL,
        prompt: fullPrompt,
        config: {
          numberOfImages: 1,
          outputMimeType: 'image/jpeg',
          aspectRatio: '3:4',
        },
    });
    
    if (response.generatedImages && response.generatedImages.length > 0) {
      const base64ImageBytes = response.generatedImages[0].image.imageBytes;
      return `data:image/jpeg;base64,${base64ImageBytes}`;
    }
    throw new Error("No image generated");
  } catch (error)
    {
    console.error("Error generating image:", error);
    return "https://picsum.photos/600/800"; // Fallback image
  }
};
